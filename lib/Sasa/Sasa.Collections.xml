<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sasa.Collections</name>
    </assembly>
    <members>
        <member name="T:Sasa.Collections.Fifo`1">
            <summary>
            A persistent queue.
            </summary>
            <typeparam name="T">The type of the queue elements.</typeparam>
        </member>
        <member name="T:Sasa.Collections.ISeq`2">
            <summary>
            The interface describing a purely functional collection.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <typeparam name="TItem">The type of the elements contained within the collection</typeparam>
            <remarks>
            The precise semantics of the collection is implementation-specific. A sequence of Add and Remove
            calls may return items in an arbitrary sequence depending on the type collection.
            </remarks>
        </member>
        <member name="M:Sasa.Collections.ISeq`2.Add(`1)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="value">The item to add.</param>
            <returns>A new collection with the new item.</returns>
        </member>
        <member name="M:Sasa.Collections.ISeq`2.Remove(`1@)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="value">The item removed.</param>
            <returns>A new collection without the item.</returns>
        </member>
        <member name="M:Sasa.Collections.ISeq`2.Remove">
            <summary>
            Remove an item from the collection
            </summary>
            <returns>A pair of a new collection without the item, and the item that was removed.</returns>
        </member>
        <member name="P:Sasa.Collections.ISeq`2.IsEmpty">
            <summary>
            Returns true if the collection is empty.
            </summary>
        </member>
        <member name="T:Sasa.Collections.IEnumerable`3">
            <summary>
            A collection whose type specifies the ordering and duplicate semantics.
            </summary>
            <typeparam name="T">The type of values.</typeparam>
            <typeparam name="TOrd">The collection ordering.</typeparam>
            <typeparam name="TDup">The collection's duplicate semantics.</typeparam>
        </member>
        <member name="T:Sasa.Collections.IAtomic`1">
            <summary>
            Represents a value type that can be updated atomically.
            </summary>
            <typeparam name="T">The struct type.</typeparam>
        </member>
        <member name="M:Sasa.Collections.IAtomic`1.Set(`0@)">
            <summary>
            The update operation.
            </summary>
            <param name="slot">The slot to update atomically.</param>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize the queue with the given list of values.
            </summary>
            <param name="values">The list of values.</param>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.#ctor(`0)">
            <summary>
            Construct a single-element queue.
            </summary>
            <param name="value">The initial queue value.</param>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.Set(Sasa.Collections.Fifo{`0}@)">
            <summary>
            Atomically update the slot.
            </summary>
            <param name="slot">The slot to update.</param>
            <returns>True if the slot was updated atomically, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.Equals(Sasa.Collections.Fifo{`0})">
            <summary>
            Tests structural equality of two queues.
            </summary>
            <param name="other">The other queue to compare to.</param>
            <returns>True if the queues are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">The other object to compare to.</param>
            <returns>Returns true if the objects are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.GetHashCode">
            <summary>
            Returns the hash code for the current sequence.
            </summary>
            <returns>The integer hash code.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.Enqueue(`0)">
            <summary>
            Enqueue a value and return a new queue.
            </summary>
            <param name="value">The value to enqueue.</param>
            <returns>A new queue with <paramref name="value"/> as its last element.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.Append(Sasa.Collections.Fifo{`0})">
            <summary>
            Appends the elements of two queues.
            </summary>
            <param name="other">The queue whose elements we should append.</param>
            <returns>A new queue consisting of this queue's elements followed by <paramref name="other"/>'s elements.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.Dequeue(`0@)">
            <summary>
            Dequeue the first value in the queue.
            </summary>
            <param name="value">The first value in the queue.</param>
            <returns>Returns a new queue minus the first value.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.Dequeue">
            <summary>
            Remove an item from the collection
            </summary>
            <returns>A pair of a new collection without the item, and the item that was removed.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.GetEnumerator">
            <summary>
            Returns an enumerator over the given list.
            </summary>
            <returns>An enumeration over the list.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.op_Equality(Sasa.Collections.Fifo{`0},Sasa.Collections.Fifo{`0})">
            <summary>
            Test two queues for equality.
            </summary>
            <param name="left">The left queue.</param>
            <param name="right">The right queue.</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.op_Inequality(Sasa.Collections.Fifo{`0},Sasa.Collections.Fifo{`0})">
            <summary>
            Test two sequences for inequality.
            </summary>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <returns>Returns true if they are not equal.</returns>
        </member>
        <member name="M:Sasa.Collections.Fifo`1.ToString">
            <summary>
            Converts a queue to a string.
            </summary>
            <returns>A string representation of the queue.</returns>
        </member>
        <member name="P:Sasa.Collections.Fifo`1.Empty">
            <summary>
            An empty queue.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Fifo`1.IsEmpty">
            <summary>
            Returns true if the queue is empty.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Fifo`1.Value">
            <summary>
            Returns the first value in the queue.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the queue is empty.</exception>
        </member>
        <member name="T:Sasa.Collections.Fifo">
            <summary>
            Extension methods on <see cref="T:Sasa.Collections.Fifo`1"/>.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Fifo.ToQueue``1(Sasa.Collections.Lifo{``0})">
            <summary>
            Convert a sequence to a queue.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="seq">The sequence to convert to a queue.</param>
            <returns>A queue whose first element is the top of the stack.</returns>
        </member>
        <member name="T:Sasa.Collections.Ord">
            <summary>
            Defines the ordering of the elements.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Ord.Asc">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Ord.Desc">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Ord.None">
            <summary>
            No ordering.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Ord.Lifo">
            <summary>
            Last-in-first-out.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Ord.Fifo">
            <summary>
            First-in-first-out.
            </summary>
        </member>
        <member name="T:Sasa.Collections.CollectionType">
            <summary>
            Defines the collection duplicate semantics.
            </summary>
        </member>
        <member name="T:Sasa.Collections.CollectionType.Set">
            <summary>
            Collection has set semantics.
            </summary>
        </member>
        <member name="T:Sasa.Collections.CollectionType.Bag">
            <summary>
            Collection has bag semantics.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Lifo`1">
            <summary>
            A purely functional stack.
            </summary>
            <remarks>
            "null" is also a valid sequence value that can be used to
            construct lists (see example).
            </remarks>
            <example>
            <code>Seq&lt;T&gt; list = value1 &amp; value2 &amp; null;</code>
            </example>
            <typeparam name="T">The type of the sequence elements.</typeparam>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.#ctor(`0,Sasa.Collections.Lifo{`0})">
            <summary>
            Construct a new sequence from a new head value and an existing list.
            </summary>
            <param name="e">The new value at the head of the list.</param>
            <param name="tail">The remainder of the list.</param>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.#ctor(`0)">
            <summary>
            Construct a new single-element sequence.
            </summary>
            <param name="e">The new value at the head of the list.</param>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.GetEnumerator">
            <summary>
            Returns an enumerator over the given list.
            </summary>
            <returns>An enumeration over the list.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Equals(Sasa.Collections.Lifo{`0})">
            <summary>
            Tests structural equality of two sequences.
            </summary>
            <param name="other">The other sequence to compare to.</param>
            <returns>True if the sequences are equal, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="obj">The other object to compare to.</param>
            <returns>Returns true if the objects are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.GetHashCode">
            <summary>
            Returns the hash code for the current sequence.
            </summary>
            <returns>The integer hash code.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Peek">
            <summary>
            Peeks at the current value in the sequence.
            </summary>
            <returns>The value at the head of the sequence.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the sequence is empty.</exception>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Pop(`0@)">
            <summary>
            Pops the first element off the sequence.
            </summary>
            <param name="value">The value in the first element of the sequence.</param>
            <returns>The remaining sequence.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the sequence is empty.</exception>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Pop">
            <summary>
            Pops the first element off the sequence.
            </summary>
            <returns>A pair consisting of the new sequence and the current element of the sequence.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the sequence is empty.</exception>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Push(`0)">
            <summary>
            Push an element on to the front of the sequence.
            </summary>
            <param name="value">The new head of the sequence.</param>
            <returns>A new sequence.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Contains(`0)">
            <summary>
            Checks whether a value is in the sequence.
            </summary>
            <param name="value">The value to test.</param>
            <returns>True if the element is in the sequence, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Reverse">
            <summary>
            Reverse a sequence.
            </summary>
            <returns>A reversed sequence.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Append(Sasa.Collections.Lifo{`0})">
            <summary>
            Append the given sequence after the current sequence.
            </summary>
            <param name="other">The elements to append.</param>
            <returns>A new sequence constructed from the given parameters.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.ReverseAppend(Sasa.Collections.Lifo{`0})">
            <summary>
            Reverses the current sequence and appens another sequence to the end.
            </summary>
            <param name="append">The sequence to append.</param>
            <returns>A combined sequence.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Select``1(``0,System.Func{`0,Sasa.Collections.Lifo{`0},``0})">
            <summary>
            Apply an operation to a deconstructed list.
            </summary>
            <typeparam name="R">The type of return value.</typeparam>
            <param name="otherwise">The value to return if the sequence is empty.</param>
            <param name="cons">The function to invoke with the deconstructed head of the list.</param>
            <returns>Returns cons(head, tail), or otherwise if the sequence is empty.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Select(`0)">
            <summary>
            Return the value at the head of the list.
            </summary>
            <param name="otherwise">The value to return if the sequence is empty.</param>
            <returns>Returns the value at the head of the list, or 'otherwise' if the sequence is empty.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Set(Sasa.Collections.Lifo{`0}@)">
            <summary>
            Perform an atomic set of a stack value.
            </summary>
            <param name="slot">The reference at which to place the new head.</param>
            <returns>Returns true if the swap succeeded.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Remove(`0)">
            <summary>
            Remove an element from the sequence.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>A new sequence without the element.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.Do(System.Action{`0})">
            <summary>
            Apply an operation over a sequence.
            </summary>
            <param name="f">The function to apply.</param>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.ToString">
            <summary>
            Return a string representation of the given list.
            </summary>
            <returns>String represetation of the list.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.op_BitwiseAnd(Sasa.Collections.Lifo{`0},`0)">
            <summary>
            The sequence 'cons'/add operation, to construct a sequence from a new value and an existing list.
            </summary>
            <param name="t">The new value at the head of the list.</param>
            <param name="l">The remainder of the list.</param>
            <returns>A new sequence constructed from the given parameters.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.op_BitwiseAnd(Sasa.Collections.Lifo{`0},Sasa.Collections.Lifo{`0})">
            <summary>
            The sequence 'cons'/add operation, to construct a sequence from two lists.
            </summary>
            <param name="left">The new value at the head of the list.</param>
            <param name="right">The remainder of the list.</param>
            <returns>A new sequence constructed from the given parameters.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.op_BitwiseOr(Sasa.Collections.Lifo{`0},`0)">
            <summary>
            Returns the value at the head of the sequence o, if o is not empty, or t otherwise. This is
            the sequence equivalent of the ?? operator for null values.
            </summary>
            <param name="o">The sequence value to return if not empty.</param>
            <param name="t">The value to return otherwise.</param>
            <returns>Either the head of the list, or t.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.op_Equality(Sasa.Collections.Lifo{`0},Sasa.Collections.Lifo{`0})">
            <summary>
            Test two sequences for equality.
            </summary>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Sasa.Collections.Lifo`1.op_Inequality(Sasa.Collections.Lifo{`0},Sasa.Collections.Lifo{`0})">
            <summary>
            Test two sequences for inequality.
            </summary>
            <param name="left">The left sequence.</param>
            <param name="right">The right sequence.</param>
            <returns>Returns true if they are not equal.</returns>
        </member>
        <member name="P:Sasa.Collections.Lifo`1.Empty">
            <summary>
            Returns an empty stack.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Lifo`1.IsEmpty">
            <summary>
            Returns true if the sequence is empty.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Lifo`1.Value">
            <summary>
            Gets the current element of the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
        </member>
        <member name="P:Sasa.Collections.Lifo`1.Next">
            <summary>
            Returns the next element in the sequence.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
        </member>
        <member name="T:Sasa.Collections.Tree`2">
            <summary>
            An immutable hash-array mapped trie.
            </summary>
            <typeparam name="K">The type of keys.</typeparam>
            <typeparam name="T">The type of values.</typeparam>
        </member>
        <member name="M:Sasa.Collections.Tree`2.Add(`0,`1)">
            <summary>
            Add the given key-value pair to the tree.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value for the given key.</param>
            <returns>A tree containing the key-value pair.</returns>
        </member>
        <member name="M:Sasa.Collections.Tree`2.Remove(`0)">
            <summary>
            Remove the element with the given key.
            </summary>
            <param name="key">The key to remove.</param>
            <returns>A tree without the value corresponding to <paramref name="key"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Tree`2.Merge(Sasa.Collections.Tree{`0,`1})">
            <summary>
            Merge two trees.
            </summary>
            <param name="other">The tree to merge with this one.</param>
            <returns>A tree merging the entries from <paramref name="other"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Tree`2.GetEnumerator">
            <summary>
            Enumerates over the tree elements.
            </summary>
            <returns>An enumerator for the tree elements.</returns>
        </member>
        <member name="M:Sasa.Collections.Tree`2.Set(Sasa.Collections.Tree{`0,`1}@)">
            <summary>
            Atomically set the slot.
            </summary>
            <param name="slot">The slot to set.</param>
            <returns>True if set atomically, false otherwise.</returns>
        </member>
        <member name="M:Sasa.Collections.Tree`2.ToString">
            <summary>
            Return a string representation of this tree.
            </summary>
            <returns>
            A string representation of this tree.
            </returns>
        </member>
        <member name="P:Sasa.Collections.Tree`2.Empty">
            <summary>
            The empty tree.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Tree`2.Count">
            <summary>
            The number of elements in the tree.
            </summary>
        </member>
        <member name="P:Sasa.Collections.Tree`2.Item(`0)">
            <summary>
            Find the value for the given key.
            </summary>
            <param name="key">The key to lookup.</param>
            <returns>The value corresponding to <paramref name="key"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the key is not found in this tree.</exception>
        </member>
        <member name="F:Sasa.Collections.Trie`2.empty">
            <summary>
            Tree&lt;K,T&gt; is an empty tree, so just save it as a singleton
            </summary>
        </member>
        <member name="M:Sasa.Collections.Trie`2.Lookup(`0,System.UInt32)">
            <summary>
            Lookup a value under a key.
            </summary>
            <param name="key">The key to find.</param>
            <param name="hash">The key hash value.</param>
            <returns>The element for that key, or an exception if not found.</returns>
        </member>
        <member name="M:Sasa.Collections.Trie`2.Add(`0,`1,System.UInt32,System.Int32)">
            <summary>
            Add an element to the tree.
            </summary>
            <param name="key">The key to add.</param>
            <param name="value">The value to add under the given key..</param>
            <param name="hash">The key hash value for the current level.</param>
            <param name="level">The level in the tree.</param>
            <returns>A tree containing the new binding.</returns>
        </member>
        <member name="M:Sasa.Collections.Trie`2.Remove(`0,System.UInt32)">
            <summary>
            Remove a binding from tree.
            </summary>
            <param name="key">The key to remove.</param>
            <param name="hash">The key's hash code.</param>
            <returns></returns>
        </member>
        <member name="M:Sasa.Collections.Trie`2.Merge(Sasa.Collections.Trie{`0,`1},System.Int32)">
            <summary>
            Merge two trees.
            </summary>
            <param name="other">The tree to merge with this one.</param>
            <param name="level">The current level in the tree.</param>
            <returns>A tree merging the entries from <paramref name="other"/>.</returns>
        </member>
        <member name="M:Sasa.Collections.Trie`2.GetEnumerator">
            <summary>
            Enumerates over the tree elements.
            </summary>
            <returns>An enumerator for the tree elements.</returns>
        </member>
        <member name="M:Sasa.Collections.Trie`2.Mask(System.UInt32)">
            <summary>
            Compute the bitmask. It keeps X bits, where a Node may have up to 2^X elements in it.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Trie`2.Bitpos(System.UInt32)">
            <summary>
            Compute the position bit in a Node's bitmask given the hash.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Trie`2.ToString">
            <summary>
            Return a string representation of this node.
            </summary>
            <returns>
            A string representation of this node.
            </returns>
        </member>
        <member name="P:Sasa.Collections.Trie`2.Count">
            <summary>
            The number of elements in the tree.
            </summary>
        </member>
        <member name="T:Sasa.Collections.Leaf`2">
            <summary>
            A single-element tree.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Sasa.Collections.Leaf`2.#ctor(`0,`1)">
            <summary>
            Construct a new leaf node.
            </summary>
            <param name="key">The key for this value.</param>
            <param name="value">The value for this node.</param>
        </member>
        <member name="M:Sasa.Collections.Leaf`2.ToString">
            <summary>
            Return a string representation of this node.
            </summary>
            <returns>
            A string representation of this node.
            </returns>
        </member>
        <member name="T:Sasa.Collections.Node`2">
            <summary>
            A bitmasked node in the tree.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="M:Sasa.Collections.Node`2.#ctor(System.UInt32,Sasa.Collections.Trie{`0,`1}[],System.Int32)">
            <summary>
            Construct a new node.
            </summary>
            <param name="bitmap">The node bitmap.</param>
            <param name="elements">The node elements.</param>
            <param name="count">The total number of elements in this and child nodes.</param>
        </member>
        <member name="M:Sasa.Collections.Node`2.#ctor(Sasa.Collections.Trie{`0,`1},System.UInt32,Sasa.Collections.Trie{`0,`1},System.UInt32)">
            <summary>
            Construct a new node from two leaves.
            </summary>
            <param name="leaf0">The original leaf.</param>
            <param name="hash0">The original hash code.</param>
            <param name="leaf1">The new leaf.</param>
            <param name="hash1">The new leaf's hash code.</param>
        </member>
        <member name="M:Sasa.Collections.Node`2.Index(System.UInt32)">
            <summary>
            Compute the element index given the position bit.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Node`2.Index(System.UInt32,System.UInt32)">
            <summary>
            Compute the element index.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Node`2.ToString">
            <summary>
            Return a string representation of this node.
            </summary>
            <returns>
            A string representation of this node.
            </returns>
        </member>
        <member name="T:Sasa.Collections.Collision`2">
            <summary>
            A hash collision node.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:Sasa.Collections.Tree">
            <summary>
            Static extension methods on trees.
            </summary>
        </member>
        <member name="M:Sasa.Collections.Tree.Make``2">
            <summary>
            Construct a new empty tree.
            </summary>
            <typeparam name="K">The key type.</typeparam>
            <typeparam name="T">The value type.</typeparam>
            <returns>A new empty tree.</returns>
        </member>
        <member name="T:Sasa.Collections.Specialized.WaitQueue`1">
            <summary>
            A queue that implements blocking pulls.
            </summary>
            <typeparam name="T">The type of the queue elements.</typeparam>
            <remarks>
            This basically implements an actor mailbox, where a thread will block trying to pull
            the next message until one becomes available.
            </remarks>
        </member>
        <member name="M:Sasa.Collections.Specialized.WaitQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an item.
            </summary>
            <param name="item">The item to enqueue.</param>
        </member>
        <member name="M:Sasa.Collections.Specialized.WaitQueue`1.Dequeue">
            <summary>
            The list of items currently enqueued.
            </summary>
            <returns>A list of items current enqueued.</returns>
        </member>
        <member name="M:Sasa.Collections.Specialized.WaitQueue`1.Dequeue(System.Int32)">
            <summary>
            The list of items currently enqueued.
            </summary>
            <param name="timeout">Timeout in milliseconds.</param>
            <returns>A list of items current enqueued.</returns>
        </member>
        <member name="M:Sasa.Collections.Specialized.WaitQueue`1.GetEnumerator">
            <summary>
            Enumerate over the values.
            </summary>
            <returns>An enumerator over the enqueued values.</returns>
        </member>
        <member name="M:Sasa.Collections.Specialized.WaitQueue`1.Dispose">
            <summary>
            Dispose the queue's resources.
            </summary>
        </member>
    </members>
</doc>
